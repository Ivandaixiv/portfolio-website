{"version":3,"sources":["navigtion/styles.js","navigtion/index.js","navigtion/Navigation.js","pages/About/index.js","pages/About/About.js","pages/Testimonials/index.js","pages/Testimonials/Testimonials.js","pages/Contact/index.js","pages/Contact/Contact.js","pages/Home/index.js","pages/Home/Home.js","routes/index.js","routes/routes.js","App.js","serviceWorker.js","index.js"],"names":["styles","createStyles","root","width","display","justifyContent","iconContainer","position","background","top","right","icon","padding","height","list","fullList","compassContainer","left","compass","Navigation","withStyles","props","anchor","classes","React","useState","state","setState","Shake","setShake","toggleDrawer","open","event","type","key","className","Button","size","onClick","color","Drawer","onClose","clsx","role","onKeyDown","List","ListItem","to","ListItemText","primary","shake","alert","About","Testimonials","Contact","Home","Routes","exact","path","component","from","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29a3cb42.chunk.js","sourcesContent":["import { createStyles } from \"@material-ui/styles\";\nconst styles = createStyles({\n  root: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  iconContainer: {\n    position: \"absolute\",\n    background: \"#24305E\",\n    top: 10,\n    right: 10,\n  },\n  icon: {\n    padding: 10,\n    width: 30,\n    height: 30,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: \"auto\",\n  },\n  compassContainer: {\n    position: \"absolute\",\n    top: 10,\n    left: 10,\n    background: \"#24305E\",\n  },\n  compass: {\n    padding: 10,\n    width: 30,\n    height: 30,\n  },\n});\nexport default styles;\n","import Navigation from \"./Navigation\";\nexport default Navigation;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MdCompass from \"react-ionicons/lib/MdCompass\";\nimport MdFolder from \"react-ionicons/lib/MdFolder\";\nimport MdPerson from \"react-ionicons/lib/MdPerson\";\nimport MdChatbubbles from \"react-ionicons/lib/MdChatbubbles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport Button from \"@material-ui/core/Button\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = (props) => {\n  const { classes } = props;\n  const [state, setState] = React.useState({\n    left: false,\n  });\n  const [Shake, setShake] = useState(true);\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === \"top\" || anchor === \"bottom\",\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n        <ListItem>\n          <Link to=\"/home\">\n            <Button>\n              <MdFolder className={classes.icon} />\n              <ListItemText primary=\"Home\" />\n            </Button>\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link to=\"/about\">\n            <Button>\n              <MdFolder className={classes.icon} />\n              <ListItemText primary=\"About\" />\n            </Button>\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link to=\"/testimonials\">\n            <Button>\n              <MdPerson className={classes.icon} />\n              <ListItemText primary=\"Testimonials\" />\n            </Button>\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link to=\"/contact\">\n            <Button>\n              <MdFolder className={classes.icon} />\n              <ListItemText primary=\"Contact\" />\n            </Button>\n          </Link>\n        </ListItem>\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      <>\n        <div className={classes.compassContainer}>\n          <Button size=\"small\" onClick={toggleDrawer(\"left\", true)}>\n            <MdCompass className={classes.compass} color=\"white\" />\n          </Button>\n        </div>\n        <Drawer\n          anchor={\"left\"}\n          open={state[\"left\"]}\n          onClose={toggleDrawer(\"left\", false)}\n        >\n          {list(\"left\")}\n        </Drawer>\n        <div className={classes.iconContainer}>\n          <Button size=\"small\">\n            <MdChatbubbles\n              className={classes.icon}\n              shake={Shake}\n              color=\"white\"\n              onClick={() => {\n                alert(\"This feature is coming soon...\");\n                setShake(false);\n              }}\n            />\n          </Button>\n        </div>\n      </>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Navigation);\n\nNavigation.propTypes = {\n  classes: PropTypes.objectOf(PropTypes.string),\n};\n","import About from \"./About\";\nexport default About;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst About = props => {\n  return <p>About Page</p>;\n};\n\nAbout.propTypes = {};\n\nexport default About;\n","import Testimonials from \"./Testimonials\";\nexport default Testimonials;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Testiominials = props => {\n  return <p>Testiominials Page</p>;\n};\n\nTestiominials.propTypes = {};\n\nexport default Testiominials;\n","import Contact from \"./Contact\";\nexport default Contact;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Contact = props => {\n  return <p>Contact Page</p>;\n};\n\nContact.propTypes = {};\n\nexport default Contact;\n","import Home from \"./Home\";\nexport default Home;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Home = (props) => {\n  return <p>Home Page</p>;\n};\n\nHome.propTypes = {};\n\nexport default Home;\n","import Routes from \"./routes\";\nexport default Routes;\n","import React from \"react\";\nimport { Redirect, Switch, Route } from \"react-router-dom\";\nimport About from \"../pages/About\";\nimport Testimonials from \"../pages/Testimonials\";\nimport Contact from \"../pages/Contact\";\nimport Home from \"../pages/Home\";\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/home\" component={Home} />\n      <Route exact path=\"/about\" component={About} />\n      <Route exact path=\"/testimonials\" component={Testimonials} />\n      <Route exact path=\"/contact\" component={Contact} />\n      <Redirect from=\"*\" to=\"/home\" />\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navigation from \"./navigtion\";\nimport AppRoutes from \"./routes\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Navigation />\n        <AppRoutes />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}