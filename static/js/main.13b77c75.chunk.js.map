{"version":3,"sources":["navigtion/styles.js","navigtion/index.js","navigtion/Navigation.js","pages/About/index.js","pages/About/About.js","pages/Testimonials/index.js","pages/Testimonials/Testimonials.js","App.js","serviceWorker.js","index.js"],"names":["styles","root","background","width","display","justifyContent","icon","padding","height","Navigation","withStyles","props","useState","Shake","setShake","classes","className","color","shake","onClick","alert","About","Testimonials","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iWAeeA,EAbA,CACbC,KAAM,CACJC,WAAY,UACZC,MAAO,OACPC,QAAS,OACTC,eAAgB,iBAElBC,KAAM,CACJC,QAAS,GACTJ,MAAO,GACPK,OAAQ,KCXGC,ECkCAC,YAAWV,EAAXU,EA3BI,SAAAC,GAAU,IAAD,EACAC,oBAAS,GADT,mBACnBC,EADmB,KACZC,EADY,KAElBC,EAAYJ,EAAZI,QACR,OACE,yBAAKC,UAAWD,EAAQd,MACtB,6BACE,kBAAC,IAAD,CAAWe,UAAWD,EAAQT,KAAMW,MAAM,WAE5C,6BACE,kBAAC,IAAD,CACED,UAAWD,EAAQT,KACnBY,MAAOL,EACPI,MAAM,QACNE,QAAS,WACPC,MAAM,kCACNN,GAAS,WCtBNO,ECED,SAAAV,GACZ,OAAO,0CCHMW,ECEO,SAAAX,GACpB,OAAO,kDCaMY,E,iLAVX,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.13b77c75.chunk.js","sourcesContent":["import { flexbox } from \"@material-ui/system\";\n\nconst styles = {\n  root: {\n    background: \"#24305E\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  icon: {\n    padding: 10,\n    width: 40,\n    height: 40\n  }\n};\nexport default styles;\n","import Navigation from \"./Navigation\";\nexport default Navigation;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport MdReorder from \"react-ionicons/lib/MdReorder\";\nimport MdChatbubbles from \"react-ionicons/lib/MdChatbubbles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nconst Navigation = props => {\n  const [Shake, setShake] = useState(true);\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <div>\n        <MdReorder className={classes.icon} color=\"white\" />\n      </div>\n      <div>\n        <MdChatbubbles\n          className={classes.icon}\n          shake={Shake}\n          color=\"white\"\n          onClick={() => {\n            alert(\"This feature is coming soon...\");\n            setShake(false);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nNavigation.propTypes = {\n  classes: PropTypes.objectOf(PropTypes.string)\n};\n\nexport default withStyles(styles)(Navigation);\n","import About from \"./About\";\nexport default About;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst About = props => {\n  return <p>About Page</p>;\n};\n\nAbout.propTypes = {};\n\nexport default About;\n","import Testimonials from \"./Testimonials\";\nexport default Testimonials;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Testiominials = props => {\n  return <p>Testiominials Page</p>;\n};\n\nTestiominials.propTypes = {};\n\nexport default Testiominials;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navigation from \"./navigtion\";\nimport About from \"./pages/About\";\nimport Testimonials from \"./pages/Testimonials\";\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Navigation />\n        <About />\n        <Testimonials />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}